/*
 * bella
 * https://github.com/chrisenytc/bella
 *
 * Copyright (c) 2013 Christopher EnyTC
 * Licensed under the MIT license.
 */

'use strict';

/*
 * Module Dependencies
 */

var nina = require('nina');

/**
@class Bella
 */

/*
 * Public Methods
 */

/**
 * Method responsible for initiating the module and set the Schema and create a model to be used by other methods.
 *
 * @example
 *
 *     app.configure(function() {
 *       app.use(bella.init(mongoose, conn));
 *     });
 *
 * @method init
 * @param {Object} mongoose Instance of Mongoose
 * @param {Object} conn A mongoose connection
 * @return {Function} Returns a middleware
 */

exports.init = function init(mongoose, conn) {
  //Create Mongoose Schema
  var Schema = mongoose.Schema;
  //Create Mongoose Model
  var bellaSchema = new Schema({
    ip: {
      type: String,
      required: true
    },
    domain: {
      type: String,
      required: true
    },
    access_token: {
      type: String,
      required: true,
      unique: true
    },
    terminal: {
      type: Boolean,
      required: true,
      default: false
    }
  });

  //Create a Instance of Mongoose Model and parse to methods
  this.Model = conn.model('Bella', bellaSchema);

  //Return a middleware
  return function (req, res, next) {
    next();
  };
};

/**
 * Method responsible for creating the access_tokens to be used by the authentication system
 *
 * @example
 *
 *     bella.create('example.com', '127.0.0.1', true, function(err, access_token) {
 *       console.log('Token: ' + access_token);
 *     });
 *
 * @method create
 * @param {String} domain A new Domain
 * @param {String} ip A new Ip
 * @param {Boolean} terminal A new terminal option
 * @param {Function} cb A callback with the error and a new access_token
 * @return {Function} Returns a callback
 */

exports.create = function create(domain, ip, terminal, cb) {
  //Fallback
  cb = cb || function () {};
  //Fallback terminal options
  terminal = terminal || false;
  //Make a new access_token with this data
  var access_token = nina.generate(null, domain, ip, 19092013);
  //Create new User with this data
  var user = new this.Model({
    domain: domain,
    ip: ip,
    access_token: access_token,
    terminal: terminal
  });
  //Save this user in database
  try {
    user.save(function (err) {
      //If error throw this error
      if (err) {
        throw err;
      } else {
        //Return a callback with access_token
        cb(null, access_token);
      }
    });
  } catch (e) {
    cb(e, access_token);
  }

};

/**
 * Method responsible for removing users
 *
 * @example
 *
 *     bella.remove('YOUR ACCESS TOKEN', function(err, access_token) {
 *       console.log('Token: ' + access_token + 'Deleted');
 *     });
 *
 * @method remove
 * @param {String} access_token A Access Token generated by create method
 * @param {Function} cb A callback with the error and access_token
 * @return {Function} Returns a callback
 */

exports.remove = function remove(access_token, cb) {
  //Fallback
  cb = cb || function () {};
  //delete this user on database
  try {
    this.Model.remove({
      access_token: access_token
    }, function (err) {
      //If error throw this error
      if (err) {
        throw err;
      } else {
        //Return a callback with access_token
        cb(null, access_token);
      }
    });
  } catch (e) {
    //Return a callback with access_token
    cb(e, access_token);
  }

};

/**
 * Method responsible for authenticating access the API.
 * Only users with Access Token, Domain, IP, Username and Password authenticated can access the API.
 *
 * @example
 *
 *     app.configure(function() {
 *       app.use(bella.init(mongoose, conn));
 *       app.use(bella.authenticate());
 *     });
 *
 *     //OR
 *
 *     app.get('/users', bella.authenticate(), ctrl);
 *
 * @method authenticate
 * @return {Function} Returns a middleware
 */

exports.authenticate = function authenticate() {
  //Save this scope
  var that = this;
  // return a middleware
  return function (req, res, next) {
    //Search for tokens
    that.Model.findOne({
      access_token: req.query.access_token
    }, function (err, doc) {
      //Try get token
      try {
        //If error throw a new error
        if (err) {
          throw err;
        }
        //Check if doc is a JSON Object
        if (doc) {
          //Check if the terminal options is enabled on document
          if (doc.terminal) {
            //Check if the authentication data
            if (req.query.access_token !== doc.access_token) {
              //User do not have access
              throw new Error('Bad Authentication. You do not have permission to access the API.');
            } else {
              //Access granted
              next();
            }
          } else {
            //Check if the authentication data
            if (req.domain !== doc.domain && req.ip !== doc.ip && req.query.access_token !== doc.access_token) {
              //User do not have access
              throw new Error('Bad Authentication. You do not have permission to access the API.');
            } else {
              //Access granted
              next();
            }
          }
        } else {
          throw new Error('Bad Authentication. You do not have permission to access the API.');
        }
      } catch (e) {
        //If user do not have permission to acessing the API, send a 401 response with error message
        res.json(401, {
          error: 'Bad Authentication. You do not have permission to access the API.'
        });
        //Next request with error
        if ('test' !== process.env.NODE_ENV) {
          next(e);
        } else {
          next();
        }
      }
    });

  };

};
