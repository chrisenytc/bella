/*
 * bella
 * https://github.com/chrisenytc/bella
 *
 * Copyright (c) 2014, Christopher EnyTC
 * Licensed under the MIT license.
 */

'use strict';

/*
 * Module Dependencies
 */

var hat = require('hat'),
    rack = hat.rack(),
    _ = require('underscore');

/**
 * @class Bella
 *
 * @constructor
 *
 * Constructor responsible for provide a bootstrap
 *
 * @example
 *
 *     app.use(bella.init(mongoose, {connection: conn, uri: dbUri, status: true, model: userModel}));
 *
 * @param {Object} mongoose Mongoose instance
 * @param {Object} options Options for Bella
 * @return {Function} Returns a middleware
 */

exports.init = function Bella(mongoose, options) {
    //Create Mongoose Schema
    var Schema = mongoose.Schema,
        db = options.connection;
    //Create Mongoose connection
    if (options.uri) {
        mongoose.connect(options.uri, function(err) {
            if (err) {
                throw err;
            }
        });
        //Get connection
        db = mongoose.connection;
    }
    //Create Mongoose Model
    var PermissionSchema = new Schema({
        access_token: {
            type: String,
            required: true,
            unique: true
        },
        ip: {
            type: String,
            required: true
        },
        domain: {
            type: String,
            required: true
        },
        permissions: {
            type: Array,
            default: ['user']
        },
        user: {
            type: Schema.ObjectId,
            ref: 'User'
        }
    });
    //Set default permissions
    this.enableStatus = options.status || false;
    this.UserModel = options.model || db.model('User');
    this.PermissionModel = db.model('Permission', PermissionSchema);
    //Return a middleware
    return function init(req, res, next) {
        next();
    };
};

/**
 * Method responsible for creating the access_tokens to be used by the authentication system
 *
 * @example
 *
 *     bella.create(req.user, ['user', 'create_article'], '127.0.0.1', 'example.com', function(err, access_token) {
 *       console.log('Token: ' + access_token);
 *     });
 *
 * @method create
 * @param {Object} user A user
 * @param {String} permissions A array list of permissions
 * @param {String} ip A new Ip
 * @param {String} domain A new Domain
 * @param {Function} cb A callback with the error and a new access_token
 * @return {Function} Returns a callback
 */

exports.create = function create(user, permissions, ip, domain, cb) {
    //Fallback
    cb = cb || function() {};
    //Make a new access_token with this data
    var access_token = rack();
    //Create new User with this data
    var permissionAuth = new this.PermissionModel({
        access_token: access_token,
        ip: ip,
        domain: domain,
        permissions: permissions,
        user: user
    });
    //Save this token in database
    try {
        permissionAuth.save(function(err) {
            //If error throw this error
            if (err) {
                throw err;
            } else {
                //Return a callback with access_token
                cb(null, access_token);
            }
        });
    } catch (e) {
        cb(e, null);
    }

};

/**
 * Method responsible for removing users
 *
 * @example
 *
 *     bella.remove('YOUR ACCESS TOKEN', function(err, access_token) {
 *       console.log('Token: ' + access_token + 'Deleted');
 *     });
 *
 * @method remove
 * @param {String} access_token A Access Token generated by create method
 * @param {Function} cb A callback with the error
 * @return {Function} Returns a callback
 */

exports.remove = function remove(access_token, cb) {
    //Fallback
    cb = cb || function() {};
    //delete this user on database
    try {
        this.PermissionModel.remove({
            access_token: access_token
        }, function(err) {
            //If error throw this error
            if (err) {
                throw err;
            } else {
                //Return a callback with access_token
                cb(null, access_token);
            }
        });
    } catch (e) {
        //Return a callback with access_token
        cb(e, null);
    }

};

/**
 * Method responsible for authenticating access the API.
 * Only users with Access Token, Domain and IP authenticated can access the API.
 *
 * @example
 *
 *     app.configure(function() {
 *       app.use(bella(mongoose, {connection: mongooseConnection, status: false, model: userModel}));
 *       app.use(bella.authenticate());
 *     });
 *
 *     //OR
 *
 *     app.get('/users', bella.authenticate('user'), ctrl);
 *
 * @method authenticate
 * @param {String} permission The required permission
 * @return {Function} Returns a middleware
 */

exports.authenticate = function authenticate(permission) {
    //Save this scope
    var that = this;
    // return a middleware
    return function authenticate(req, res, next) {
        //Callback
        function callback(msg) {
            //Access denied
            if (typeof msg === 'string') {
                msg = msg;
            } else {
                msg = msg.message;
            }
            res.jsonp(401, {
                message: 'Bad Authentication. You do not have permission to access the API.',
                error: msg
            });
        }

        //Check if all permissions exists

        function inPermissionList(list, permission) {
            return _.contains(list, permission);
        }
        //Check if user exists
        return that.UserModel.findOne({
            access_token: req.query.access_token
        }).exec(function(err, data) {
            if (err) {
                return callback(err);
            }
            if (!data) {
                return that.PermissionModel.findOne({
                    access_token: req.query.access_token
                }).populate('user')
                    .exec(function(pErr, pData) {
                        if (pErr) {
                            return callback(pErr);
                        }
                        if (!pData) {
                            return callback('access_token not found');
                        }
                        if (req.host !== pData.domain || req.ip !== pData.ip) {
                            return callback('The IP or domain is different from registered for this access_token');
                        }
                        if (!inPermissionList(pData.permissions, permission)) {
                            return callback('This access_token not have the permissions to continue the request.');
                        }
                        //Create permissionData
                        req.user = pData;
                        req.profile = pData;
                        return next();
                    });
            }
            if (that.enableStatus) {
                if (!data.status) {
                    return callback('Inactive User');
                }
            }
            if (!inPermissionList(data.permissions, permission)) {
                return callback('This access_token not have the permissions to continue the request.');
            }
            //Create userData
            req.user = data;
            req.profile = data;
            //Access granted
            return next();
        });
    };

};
